// import { createSlice, createAsyncThunk, PayloadAction } from "@reduxjs/toolkit";
// import axios from "axios";
// import {
//   IPost,
//   IProductPost,
//   IServicePost,
//   IRegularPost,
//   PostType,
// } from "../types/post.types";

// const API_URL = "http://localhost:3000";

// // –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–∞–Ω—É –ø–æ—Å—Ç—ñ–≤
// interface PostState {
//   posts: IPost[];
//   loading: boolean;
//   error: string | null;
// }

// // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
// const initialState: PostState = {
//   posts: [],
//   loading: false,
//   error: null,
// };

// // üîπ –û–¢–†–ò–ú–ê–ù–ù–Ø –ü–û–°–¢–Ü–í –ö–û–†–ò–°–¢–£–í–ê–ß–ê
// export const fetchUserPosts = createAsyncThunk<
//   IPost[], // –¢–∏–ø —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–º–∞—Å–∏–≤ –ø–æ—Å—Ç—ñ–≤)
//   string, // –¢–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç—É (userId)
//   { rejectValue: string } // –¢–∏–ø –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
// >("posts/fetchUserPosts", async (userId, { rejectWithValue }) => {
//   try {
//     const response = await axios.get(`${API_URL}/posts/${userId}`, {
//       withCredentials: true,
//     });
//     return response.data.data;
//   } catch (error: any) {
//     return rejectWithValue(
//       error.response?.data?.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å—Ç–∏"
//     );
//   }
// });

// // üîπ –°–¢–í–û–†–ï–ù–ù–Ø –ü–û–°–¢–ê
// export const createPost = createAsyncThunk<
//   IPost, // –¢–∏–ø —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–æ–¥–∏–Ω –ø–æ—Å—Ç)
//   IRegularPost | IProductPost | IServicePost, // –¢–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç—É (–¥–∞–Ω—ñ –ø–æ—Å—Ç–∞)
//   { rejectValue: string; state: any } // –¢–∏–ø –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è + –¥–æ—Å—Ç—É–ø –¥–æ `getState`
// >("posts/createPost", async (postData, { getState, rejectWithValue }) => {
//   try {
//     const state = getState();
//     const userId = state.user.user?.id; // –û—Ç—Ä–∏–º—É—î–º–æ userId —ñ–∑ —Å—Ç–∞–Ω—É auth
//     console.log(userId);

//     if (!userId) {
//       return rejectWithValue("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π");
//     }

//     const response = await axios.post(
//       `${API_URL}/posts/`,
//       { ...postData, user: userId }, // –î–æ–¥–∞—î–º–æ userId
//       { withCredentials: true }
//     );

//     return response.data.data;
//   } catch (error: any) {
//     return rejectWithValue(
//       error.response?.data?.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç"
//     );
//   }
// });

// // üîπ –í–ò–î–ê–õ–ï–ù–ù–Ø –ü–û–°–¢–ê
// export const deletePost = createAsyncThunk<
//   string, // –¢–∏–ø —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (ID –≤–∏–¥–∞–ª–µ–Ω–æ–≥–æ –ø–æ—Å—Ç–∞)
//   string, // –¢–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç—É (postId)
//   { rejectValue: string }
// >("posts/deletePost", async (postId, { rejectWithValue }) => {
//   try {
//     await axios.delete(`${API_URL}/posts/${postId}`, { withCredentials: true });
//     return postId; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ ID –≤–∏–¥–∞–ª–µ–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
//   } catch (error: any) {
//     return rejectWithValue(
//       error.response?.data?.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å—Ç"
//     );
//   }
// });

// // üîπ –°–õ–ê–ô–° –î–õ–Ø –ü–û–°–¢–Ü–í
// const postsSlice = createSlice({
//   name: "posts",
//   initialState,
//   reducers: {},
//   extraReducers: (builder) => {
//     builder
//       // üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤
//       .addCase(fetchUserPosts.fulfilled, (state, action) => {
//         state.posts = action.payload;
//         state.loading = false;
//         state.error = null;
//       })
//       // üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞
//       .addCase(createPost.fulfilled, (state, action) => {
//         state.posts.unshift(action.payload);
//         state.loading = false;
//         state.error = null;
//       })
//       // üîπ –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞
//       .addCase(deletePost.fulfilled, (state, action) => {
//         state.posts = state.posts.filter((post) => post._id !== action.payload);
//         state.loading = false;
//         state.error = null;
//       })
//       // üîπ –õ–æ–≤–∏–º–æ –≤—Å—ñ pending-–∑–∞–ø–∏—Ç–∏
//       .addMatcher(
//         (action) => action.type.endsWith("/pending"),
//         (state) => {
//           state.loading = true;
//           state.error = null;
//         }
//       )
//       // üîπ –õ–æ–≤–∏–º–æ –≤—Å—ñ –ø–æ–º–∏–ª–∫–∏
//       .addMatcher(
//         (action) => action.type.endsWith("/rejected"),
//         (state, action: PayloadAction<unknown>) => {
//           state.loading = false;
//           state.error = action.payload as string;
//         }
//       );
//   },
// });

// export default postsSlice.reducer;
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";
import {
  PostType,
  IPost,
  IProductPost,
  IServicePost,
} from "../types/post.types";

// –¢–∏–ø–∏ –¥–ª—è —Å—Ç–∞–Ω—É —Å–ª–∞–π—Å–∞
interface PostsState {
  posts: IPost[];
  userPosts: IPost[];
  currentPost: IPost | null;
  loading: boolean;
  error: string | null;
}

// –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
const initialState: PostsState = {
  posts: [],
  userPosts: [],
  currentPost: null,
  loading: false,
  error: null,
};

// –ë–∞–∑–æ–≤–∏–π URL API
const API_URL = "http://localhost:3000/posts";

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π thunk –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—É
export const createPost = createAsyncThunk<
  IPost, // –¢–∏–ø —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  {
    content: string;
    images: string[];
    postType: PostType;
    product?: IProductPost["product"];
    service?: IServicePost["service"];
  }, // –¢–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç—É
  { rejectValue: string }
>("posts/createPost", async (postData, { rejectWithValue }) => {
  try {
    const { data } = await axios.post(API_URL, postData, {
      withCredentials: true,
    });

    return data.data;
  } catch (error: any) {
    return rejectWithValue(
      error.response?.data?.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç"
    );
  }
});

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π thunk –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const getUserPosts = createAsyncThunk<
  IPost[], // –¢–∏–ø —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–º–∞—Å–∏–≤ –ø–æ—Å—Ç—ñ–≤)
  string, // –¢–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç—É (userId)
  { rejectValue: string }
>("posts/getUserPosts", async (userId, { rejectWithValue }) => {
  try {
    const { data } = await axios.get(`${API_URL}/${userId}`, {
      withCredentials: true,
    });
    console.log(data.data);

    return data.data;
  } catch (error: any) {
    return rejectWithValue(
      error.response?.data?.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
    );
  }
});

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π thunk –¥–ª—è –ª–∞–π–∫—É –ø–æ—Å—Ç–∞
export const likePost = createAsyncThunk<
  IPost, // –¢–∏–ø —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ—Å—Ç)
  string, // –¢–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç—É (postId)
  { rejectValue: string }
>("posts/likePost", async (postId, { rejectWithValue }) => {
  try {
    const { data } = await axios.post(`${API_URL}/${postId}/like`);
    return data.data;
  } catch (error: any) {
    return rejectWithValue(
      error.response?.data?.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –ª–∞–π–∫–Ω—É—Ç–∏ –ø–æ—Å—Ç"
    );
  }
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ª–∞–π—Å–∞
const postsSlice = createSlice({
  name: "posts",
  initialState,
  reducers: {
    clearPostsError: (state) => {
      state.error = null;
    },
    resetCurrentPost: (state) => {
      state.currentPost = null;
    },
  },
  extraReducers: (builder) => {
    builder
      // –û–±—Ä–æ–±–∫–∞ createPost
      .addCase(createPost.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(createPost.fulfilled, (state, action) => {
        state.loading = false;
        state.posts.unshift(action.payload);
        state.userPosts.unshift(action.payload);
        state.currentPost = action.payload;
      })
      .addCase(createPost.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string;
      })

      // –û–±—Ä–æ–±–∫–∞ getUserPosts
      .addCase(getUserPosts.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(getUserPosts.fulfilled, (state, action) => {
        state.loading = false;
        state.userPosts = action.payload;
      })
      .addCase(getUserPosts.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string;
      })

      // –û–±—Ä–æ–±–∫–∞ likePost
      .addCase(likePost.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(likePost.fulfilled, (state, action) => {
        state.loading = false;
        // –û–Ω–æ–≤–ª—é—î–º–æ –ª–∞–π–∫–∏ –≤ —É—Å—ñ—Ö —Å–ø–∏—Å–∫–∞—Ö –ø–æ—Å—Ç—ñ–≤
        const updatedPost = action.payload;

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤ –∑–∞–≥–∞–ª—å–Ω–æ–º—É —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç—ñ–≤
        const postIndex = state.posts.findIndex(
          (post) => post._id === updatedPost._id
        );
        if (postIndex !== -1) {
          state.posts[postIndex] = updatedPost;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userPostIndex = state.userPosts.findIndex(
          (post) => post._id === updatedPost._id
        );
        if (userPostIndex !== -1) {
          state.userPosts[userPostIndex] = updatedPost;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ—Å—Ç, —è–∫—â–æ –≤—ñ–Ω –≤—ñ–¥–∫—Ä–∏—Ç–∏–π
        if (state.currentPost && state.currentPost._id === updatedPost._id) {
          state.currentPost = updatedPost;
        }
      })
      .addCase(likePost.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string;
      });
  },
});

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ actions
export const { clearPostsError, resetCurrentPost } = postsSlice.actions;

// –°–µ–ª–µ–∫—Ç–æ—Ä–∏
export const selectAllPosts = (state: { posts: PostsState }) =>
  state.posts.posts;
export const selectUserPosts = (state: { posts: PostsState }) =>
  state.posts?.userPosts || [];
export const selectCurrentPost = (state: { posts: PostsState }) =>
  state.posts.currentPost;
export const selectPostsLoading = (state: { posts: PostsState }) =>
  state.posts?.loading;
export const selectPostsError = (state: { posts: PostsState }) =>
  state.posts?.error;

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ reducer
export default postsSlice.reducer;
