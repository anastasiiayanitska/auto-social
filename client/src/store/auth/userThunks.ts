import { createAsyncThunk } from "@reduxjs/toolkit";
import { authApi } from "./authApi";
import { RegisterData, LoginData, User } from "../../types/auth";

export const registerUser = createAsyncThunk<
  { user: User },
  RegisterData,
  { rejectValue: string }
>("/register", async (formData, { rejectWithValue }) => {
  try {
    return await authApi.register(formData);
  } catch (error: any) {
    return rejectWithValue(
      error.response?.data?.message || "–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"
    );
  }
});

export const loginUser = createAsyncThunk<
  { user: User },
  LoginData,
  { rejectValue: string }
>("/login", async (credentials, { rejectWithValue }) => {
  try {
    return await authApi.login(credentials);
  } catch (error: any) {
    return rejectWithValue(error.response?.data?.message || "–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É");
  }
});

export const logoutUser = createAsyncThunk<void, void, { rejectValue: string }>(
  "/logout",
  async (_, { rejectWithValue }) => {
    try {
      await authApi.logout();
      return;
    } catch (error: any) {
      return rejectWithValue(
        error.response?.data?.message || "–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É –∑ —Å–∏—Å—Ç–µ–º–∏"
      );
    }
  }
);

export const fetchUser = createAsyncThunk<User, void, { rejectValue: string }>(
  "/fetchUser",
  async (_, { rejectWithValue }) => {
    try {
      return await authApi.fetchUser();
    } catch (error: any) {
      return rejectWithValue(
        error.response?.data?.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
      );
    }
  }
);

export const fetchAllUsers = createAsyncThunk<
  User[],
  void,
  { rejectValue: string }
>("/fetchAllUsers", async (_, { rejectWithValue }) => {
  try {
    console.log("üîÑ –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...");
    const data = await authApi.fetchAllUsers();
    console.log("‚úÖ –î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ:", data);
    return data.data;
  } catch (error: any) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:", error);
    return rejectWithValue(
      error.response?.data?.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
    );
  }
});
