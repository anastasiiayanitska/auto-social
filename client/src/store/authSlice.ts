import { createSlice, createAsyncThunk, PayloadAction } from "@reduxjs/toolkit";
import { AuthState, RegisterData, LoginData, User } from "../types/auth";
import axios from "axios";

const API_URL = "http://localhost:3000/api"; // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à –±–µ–∫–µ–Ω–¥ URL

const initialState: AuthState = {
  user: null,
  loading: false,
  error: null,
  isAuthenticated: false,
};

// üîπ –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø
export const registerUser = createAsyncThunk<
  { user: User }, // —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
  RegisterData, // —Ç–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç—É (–ø–µ—Ä–µ–¥–∞–Ω—ñ –¥–∞–Ω—ñ)
  { rejectValue: string } // —Ç–∏–ø –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
>("auth/register", async (formData, { rejectWithValue }) => {
  try {
    const response = await axios.post(`${API_URL}/register`, formData, {
      headers: { "Content-Type": "multipart/form-data" },
      withCredentials: true, // –í–∞–∂–ª–∏–≤–æ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è cookies
    });
    return response.data.data;
  } catch (error: any) {
    return rejectWithValue(
      error.response?.data?.message || "–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"
    );
  }
});

// üîπ –õ–û–ì–Ü–ù
export const loginUser = createAsyncThunk<
  { user: User },
  LoginData,
  { rejectValue: string }
>("auth/login", async (credentials: LoginData, { rejectWithValue }) => {
  try {
    console.log(credentials);

    const response = await axios.post(`${API_URL}/login`, credentials, {
      withCredentials: true, // –í–∞–∂–ª–∏–≤–æ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è cookies
    });
    console.log(response.data);

    return response.data.data;
  } catch (error: any) {
    return rejectWithValue(error.response?.data?.message || "–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É");
  }
});

// üîπ –í–ò–•–Ü–î
export const logoutUser = createAsyncThunk<void, void, { rejectValue: string }>(
  "auth/logout",
  async (_, { rejectWithValue }) => {
    try {
      await axios.post(
        `${API_URL}/logout`,
        {},
        {
          withCredentials: true,
        }
      );
      return;
    } catch (error: any) {
      return rejectWithValue(
        error.response?.data?.message || "–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É –∑ —Å–∏—Å—Ç–µ–º–∏"
      );
    }
  }
);

// üîπ –û–¢–†–ò–ú–ê–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê
export const fetchUser = createAsyncThunk<User, void, { rejectValue: string }>(
  "auth/fetchUser",
  async (_, { rejectWithValue }) => {
    try {
      const response = await axios.get(`${API_URL}/me`, {
        withCredentials: true,
      });
      return response.data.data;
    } catch (error: any) {
      return rejectWithValue(
        error.response?.data?.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
      );
    }
  }
);

// üîπ –û–ù–û–í–õ–ï–ù–ù–Ø –ü–†–û–§–Ü–õ–Æ
export const updateUser = createAsyncThunk<
  { user: User },
  { userId: string; userData: RegisterData },
  { rejectValue: string }
>("auth/updateUser", async ({ userId, userData }, { rejectWithValue }) => {
  try {
    // –°—Ç–≤–æ—Ä—é—î–º–æ FormData –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª—ñ–≤
    const formData = new FormData();
    formData.append("username", userData.username);
    formData.append("firstName", userData.firstName);
    formData.append("lastName", userData.lastName);
    formData.append("bio", userData.bio);
    formData.append("location", userData.location);
    formData.append("phoneNumber", userData.phoneNumber);
    formData.append("website", userData.website);

    // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–æ–ª—å —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω –±—É–≤ –≤–≤–µ–¥–µ–Ω–∏–π
    if (userData.password) {
      formData.append("password", userData.password);
    }

    // –î–æ–¥–∞—î–º–æ —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞, —è–∫—â–æ –≤—ñ–Ω —î
    if (userData.avatar) {
      formData.append("avatar", userData.avatar);
    }

    const response = await axios.put(`${API_URL}/update/${userId}`, formData, {
      headers: {
        "Content-Type": "multipart/form-data",
      },
      withCredentials: true,
    });

    return response.data;
  } catch (error: any) {
    return rejectWithValue(
      error.response?.data?.message || "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"
    );
  }
});
export const fetchUserProfileById = createAsyncThunk<
  User,
  string,
  { rejectValue: string }
>("auth/fetchUserProfileById", async (userId, { rejectWithValue }) => {
  try {
    const response = await axios.get(`${API_URL}/profile/${userId}`, {
      withCredentials: true,
    });
    return response.data.data;
  } catch (error: any) {
    return rejectWithValue(
      error.response?.data?.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
    );
  }
});

const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      // üîπ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
      .addCase(registerUser.fulfilled, (state, action) => {
        state.user = action.payload.user;
        state.loading = false;
        state.error = null;
        state.isAuthenticated = true;
      })
      // üîπ –õ–æ–≥—ñ–Ω
      .addCase(loginUser.fulfilled, (state, action) => {
        state.user = action.payload.user;
        state.loading = false;
        state.error = null;
        state.isAuthenticated = true;
      })
      // üîπ –í–∏—Ö—ñ–¥
      .addCase(logoutUser.fulfilled, (state) => {
        state.user = null;
        state.loading = false;
        state.error = null;
        state.isAuthenticated = false;
      })
      // üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      .addCase(fetchUser.fulfilled, (state, action) => {
        state.user = action.payload;
        state.loading = false;
        state.isAuthenticated = true;
      })
      .addCase(updateUser.fulfilled, (state, action) => {
        state.loading = false;
        state.user = action.payload.user;
        state.isAuthenticated = true;
      })
      .addCase(fetchUserProfileById.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      // üîπ –õ–æ–≤–∏–º–æ –≤—Å—ñ pending-–∑–∞–ø–∏—Ç–∏
      .addMatcher(
        (action) => action.type.endsWith("/pending"),
        (state) => {
          state.loading = true;
          state.error = null;
        }
      )
      // üîπ –õ–æ–≤–∏–º–æ –≤—Å—ñ –ø–æ–º–∏–ª–∫–∏
      .addMatcher(
        (action) => action.type.endsWith("/rejected"),
        (state, action: PayloadAction<unknown>) => {
          state.loading = false;
          state.error = action.payload as string;
        }
      );
  },
});

export default authSlice.reducer;
